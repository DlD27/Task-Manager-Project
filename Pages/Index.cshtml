@page
@model TaskManagerProject.Pages.IndexModel
@{
    ViewData["Title"] = "Task List";
}

@Html.AntiForgeryToken()

<!-- Home page -->

<!-- Home page header and create task button -->
<div class="header-container">
    <h2>Task List</h2>
    <a asp-page="Create" class="button">Create New Task</a>
</div>

<!-- Pending tasks section -->
<h3>Pending Tasks</h3>
<div>
    @foreach (var task in Model.PendingTasks)
    {   
        // Highlight tasks due in 5 days
        var daysUntilDue = (task.DateDue - DateTime.Now).Days;
        var highlightClass = daysUntilDue <= 5 ? "text-danger fw-bold" : "";

        // Display individual pending task
        <div style="border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; border-radius: 5px; display: flex; justify-content: space-between;">
            <div style="flex: 1;">
                <p><strong>Title: @task.Title</strong></p>
                <p>Description: @task.Description</p>
                <p class="@highlightClass"><em>Due: @task.DateDue.ToString("dd/MM/yyyy")</em></p>
            </div>

            @{
                // Action buttons - Mark task as completed; Edit task; Delete task
            }
            <div style="display: flex; flex-direction: column; gap: 3px; justify-content: center;">
                <form method="post" asp-page-handler="Complete" style="margin: 0;">
                    <input type="hidden" name="id" value="@task.Id" />
                    <button type="submit" class="button" style="width: 100%;">Completed</button>
                </form>
                
                <a asp-page="Edit" asp-route-id="@task.Id" class="button" style="text-align: center; display: block;">Edit</a>
                <a href="javascript:void(0);" class="button" onclick="confirmDelete(@task.Id)" style="text-align: center; display: block;">Delete</a>
            </div>
        </div>
    }
</div>

<!-- Completed tasks section -->
<h3>Completed Tasks</h3>
<div>
    @foreach (var task in Model.CompletedTasks)
    {
        // Display individual completed task
        <div style="border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; background-color: #f8f9fa; border-radius: 5px; display: flex; justify-content: space-between;">
            <div style="flex: 1;">
                <p><strong>Title: @task.Title</strong></p>
                <p>Description: @task.Description</p>
                <p><em>Due: @task.DateDue.ToString("dd/MM/yyyy")</em></p>
            </div>
            
            @{
                // Action buttons - Edit task; Delete task
            }
            <div style="display: flex; flex-direction: column; gap: 3px; justify-content: center;">             
                <a asp-page="Edit" asp-route-id="@task.Id" class="button" style="text-align: center; display: block;">Edit</a>
                <a href="javascript:void(0);" class="button" onclick="confirmDelete(@task.Id)" style="text-align: center; display: block;">Delete</a>
            </div>
        </div>
    }
</div>

<!-- Delete confirmation modal -->
<div id="deleteModal" class="modal">
    <div class="modal-content">
        <p>Are you sure you want to delete this task?</p>
        <div class="modal-actions">
            <button id="confirmDeleteBtn" class="button">Yes</button>
            <button id="cancelDeleteBtn" class="button button--grey">Cancel</button>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        // ID of the task to be deleted
        let taskIdToDelete = null;
        
        // Modal elements
        const deleteModal = document.getElementById('deleteModal');
        const confirmDeleteBtn = document.getElementById('confirmDeleteBtn');
        const cancelDeleteBtn = document.getElementById('cancelDeleteBtn');

        // Function to show delete confirmation modal
        function confirmDelete(taskId) 
        {
            taskIdToDelete = taskId;
            deleteModal.style.display = 'block';
        }

        // Function to close modal
        function closeModal() 
        {
            deleteModal.style.display = 'none';
            taskIdToDelete = null;
        }

        // Confirm deletion
        confirmDeleteBtn.addEventListener('click', async () => 
        {
            if (!taskIdToDelete) 
            {
                closeModal();
                return;
            }

            try {
                // Send a POST request to delete the task
                const response = await fetch(`?handler=Delete`, 
                {
                    method: 'POST',
                    headers: 
                    {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: `id=${taskIdToDelete}`
                });

                // Deletion succeed then reload the page
                if (response.ok) 
                {
                    window.location.reload();
                } else 
                {
                    const error = await response.text();
                    console.error('Delete failed:', error);
                    alert('Failed to delete task. Please try again.');
                }
            } catch (error) 
            {
                console.error('Network error:', error);
                alert('Network error. Please check your connection.');
            } finally 
            {
                closeModal();
            }
        });

        // Cancel deletion
        cancelDeleteBtn.addEventListener('click', closeModal);
    </script>
}